

Add Sources and Libraries
-------------------------


 3. Open Framework and library dir of interest

    Qt:     open $QTDIR/lib/
	 geant4: open $G4ROOT/$GEANT4_VERSION/lib/
	 ccdb:   open $CCDB_HOME/lib/
    clhep:  open $CLHEP_BASE_DIR/lib/
    root:   open $ROOTSYS/lib/

	Drag needed to "Build Phases" Link with Libraries

 4. Add macos command line tool exampleName, C++, Organization Identifier:  libraryName.
    a. remove exampleName dir
    b  drag source exampleName.cc in Compile Sources build phase
    c. add libraryName link Binary with Libraries on Build Phases
    d. copy manually do not do this: drag frameworks to Copy files, products location must match CONFIGURATION_BUILD_DIR
 	    - no subpath
	    - uncheck Copy only when installing
	    - executables

 5. Build Settings: Code Signing: do not code sign

 6. For archiving purposes, (not in build phases, do it manually) copy necessary items in "executables destination",
     - this includes the rcc file (in case it's needed, see qtButtonsWidget)
     - uncheck Copy only when installing
     To run the app by command line, add @executable_path to run path in Linking

7. To create rcc file for xcode:
   rcc -binary exampleResources.qrc -o exampleResources.rcc
   scons on the other hand knows about it because the qt module
   compiles exampleResources.qrc directly



Libraries Version Warning:
--------------------------

The various libraries and frameworks need to be in the same dir as the executable. They have to be the same version.
Best way: clean that directory and copy manually the various libraries and frameworks.
The location is specified in ceInstall/settings:

MYBUILDDIR = /Users/ungaro/Library/Mobile Documents/com~apple~CloudDocs/builds


Q_OBJECT and xcode
------------------

Select your project target and in Build Rules make a new custom rule ("+" button).
Set the "Process" drop down to "Source files with names matching" and type in *.h next to that. 
Set the "Using" drop down to "Custom script:" and in the script type:

/path/to/your/Qt/bin/moc ${INPUT_FILE_PATH} -o ${DERIVED_FILE_DIR}/${INPUT_FILE_BASE}_moc.cpp
Yo will have to change the path to wherever your moc executable is.

Now add the "Output files" ("+" button):

${DERIVED_FILE_DIR}/${INPUT_FILE_BASE}_moc.cpp

Xcode will then run moc on the headers in Build Phases and it will understand
that the output from moc is a .cpp and needs to be compiled and linked into you app and do that for you.


REMAKE XCODE Projects
---------------------

The idea is to rename the current projects with an "O" at the end of the name, open it and create a new one.
The Old project will give directives on what to include.

See instructions above on creating empty project.

cd "/Users/ungaro/Library/Mobile Documents/com~apple~CloudDocs/xcode/mlibrary/"

set listTodo = (`\ls | grep ".xcodeproj" | grep -v "O.xcodeproj"`)

foreach p ($listTodo)
	set toRename = `echo $p | awk -F. '{print $1}'`
	echo $toRename
	mv $p $toRename"O.xcodeproj"
end


Order of projects

1. gstring
2. goptions
3. textProgressBar
4. translationTable
4. gdata
5. gtouchable
6. ghit
7. gFactory
8. gDynamic
9. gSplash
10. gvolume
11. g4volume
12. gruns
13. qtButtonsWidget
14. gmedia
15. g4display
16. frequencySyncSignal
17. gfields


SHARED SCHEME:

Shared: Shared schemes are stored in <.xcodeproj or .xcworkspace file>/xcshareddata/xcschemes/. A shared scheme is visible to all users of a project or workspace file.
We do not need it at the moment.








